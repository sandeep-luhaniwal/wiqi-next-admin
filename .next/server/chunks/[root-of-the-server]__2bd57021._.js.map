{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///D:/kodu/nextjs/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = global;\n\nexport const prisma =\n  globalForPrisma.prisma ||\n  new PrismaClient({\n    log:\n      process.env.NODE_ENV === 'development'\n        ? ['query', 'info', 'warn', 'error']\n        : [],\n  });\n\nif (process.env.NODE_ENV !== 'production') {\n  globalForPrisma.prisma = prisma;\n}\n\nexport default prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KACE,uCACI;QAAC;QAAS;QAAQ;QAAQ;KAAQ;AAE1C;AAEF,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;uCAEe","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///D:/kodu/nextjs/app/api/auth/%5B...nextauth%5D/auth-options.js"],"sourcesContent":["import { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport bcrypt from 'bcrypt';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport GoogleProvider from 'next-auth/providers/google';\nimport prisma from '@/lib/prisma';\n\nconst authOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n        rememberMe: { label: 'Remember me', type: 'boolean' },\n      },\n      async authorize(credentials) {\n        if (!credentials || !credentials.email || !credentials.password) {\n          throw new Error(\n            JSON.stringify({\n              code: 400,\n              message: 'Please enter both email and password.',\n            }),\n          );\n        }\n\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email },\n        });\n\n        if (!user) {\n          throw new Error(\n            JSON.stringify({\n              code: 404,\n              message: 'User not found. Please register first.',\n            }),\n          );\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password || '',\n        );\n\n        if (!isPasswordValid) {\n          throw new Error(\n            JSON.stringify({\n              code: 401,\n              message: 'Invalid credentials. Incorrect password.',\n            }),\n          );\n        }\n\n        if (user.status !== 'ACTIVE') {\n          throw new Error(\n            JSON.stringify({\n              code: 403,\n              message: 'Account not activated. Please verify your email.',\n            }),\n          );\n        }\n\n        // Update `lastSignInAt` field\n        await prisma.user.update({\n          where: { id: user.id },\n          data: { lastSignInAt: new Date() },\n        });\n\n        return {\n          id: user.id,\n          status: user.status,\n          email: user.email,\n          name: user.name || 'Anonymous',\n          roleId: user.roleId,\n          avatar: user.avatar,\n        };\n      },\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      allowDangerousEmailAccountLinking: true,\n      async profile(profile) {\n        const existingUser = await prisma.user.findUnique({\n          where: { email: profile.email },\n          include: {\n            role: {\n              select: {\n                id: true,\n                name: true,\n              },\n            },\n          },\n        });\n\n        if (existingUser) {\n          // Update `lastSignInAt` field for existing users\n          await prisma.user.update({\n            where: { id: existingUser.id },\n            data: {\n              name: profile.name,\n              avatar: profile.picture || null,\n              lastSignInAt: new Date(),\n            },\n          });\n\n          return {\n            id: existingUser.id,\n            email: existingUser.email,\n            name: existingUser.name || 'Anonymous',\n            status: existingUser.status,\n            roleId: existingUser.roleId,\n            roleName: existingUser.role.name,\n            avatar: existingUser.avatar,\n          };\n        }\n\n        const defaultRole = await prisma.userRole.findFirst({\n          where: { isDefault: true },\n        });\n\n        if (!defaultRole) {\n          throw new Error(\n            'Default role not found. Unable to create a new user.',\n          );\n        }\n\n        // Create a new user and account\n        const newUser = await prisma.user.create({\n          data: {\n            email: profile.email,\n            name: profile.name,\n            password: '', // No password for OAuth users\n            avatar: profile.picture || null,\n            emailVerifiedAt: new Date(),\n            roleId: defaultRole.id,\n            status: 'ACTIVE',\n          },\n        });\n\n        return {\n          id: newUser.id,\n          email: newUser.email,\n          name: newUser.name || 'Anonymous',\n          status: newUser.status,\n          avatar: newUser.avatar,\n          roleId: newUser.roleId,\n          roleName: defaultRole.name,\n        };\n      },\n    }),\n  ],\n\n  session: {\n    strategy: 'jwt',\n    maxAge: 24 * 60 * 60,\n  },\n  callbacks: {\n    async jwt({ token, user, session, trigger }) {\n      if (trigger === 'update' && session?.user) {\n        token = session.user;\n      } else {\n        if (user && user.roleId) {\n          const role = await prisma.userRole.findUnique({\n            where: { id: user.roleId },\n          });\n\n          token.id = user.id || token.sub;\n          token.email = user.email;\n          token.name = user.name;\n          token.avatar = user.avatar;\n          token.status = user.status;\n          token.roleId = user.roleId;\n          token.roleName = role?.name;\n        }\n      }\n\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id;\n        session.user.email = token.email;\n        session.user.name = token.name;\n        session.user.avatar = token.avatar;\n        session.user.status = token.status;\n        session.user.roleId = token.roleId;\n        session.user.roleName = token.roleName;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/signin',\n  },\n};\n\nexport default authOptions;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///D:/kodu/nextjs/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from 'next-auth';\nimport authOptions from './auth-options';\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6JAAA,CAAA,UAAW","debugId":null}}]
}